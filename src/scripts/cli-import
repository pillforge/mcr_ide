#!/usr/bin/env node

'use strict';

var program = require('commander');
var path = require('path');
var fs = require('fs-extra');
var execSync = require('child_process').execSync;

var root_path = path.resolve(__dirname, '../..');
var wb_path = path.resolve(root_path, 'node_modules/webgme/src/bin/');
var s_path = path.resolve(root_path, 'src/seeds/Meta/Meta.json');
if (!fs.existsSync(s_path)) {
  console.log('Seed not found at ', s_path);
  process.exit();
}

program
  .version('0.1.0')
  .usage('[options] <file>')
  .option('-n --new', 'Create new project')
  .option('-p --project [string]', 'Project [mandatory]')
  .option('-b --branch [string]', 'Branch [default is master]')
  .option('-t --target', 'Target platform [default is exp430')
  .option('-r --recursive', 'Recursive')
  .option('-a --all', 'Import all TOS')
  .parse(process.argv);

if (!program.project)
  program.help();

if (program.args.length !== 1 && !program.all) {
  console.log('Please provide a single argument');
  program.help();
}

if (program.new) {
  var ip = path.resolve(wb_path, 'import.js');
  var i_cmd = ['node', ip,
    '-p', program.project,
    '-b', program.branch || 'master',
    s_path
  ].join(' ');
  execSync(i_cmd, {
    cwd: root_path,
    stdio: 'inherit'
  });
}

var obj = {};
if (program.all) {
  obj = {
    goal: 'importTos',
    target: program.target || 'exp430'
  };
  run_plugin();
} else if (program.recursive) {
  var dir_path = path.resolve(process.cwd(), program.args[0]);
  if (fs.lstatSync(dir_path).isDirectory()) {
    var files = fs.readdirSync(dir_path);
    files.forEach(file => {
      if (fs.existsSync(path.join(dir_path, file, 'Makefile'))) {
        obj = {
          goal: 'importApp',
          app_path: path.join(dir_path, file),
          target: program.target || 'exp430'
        };
        run_plugin();
      }
    });
  }
} else {
  var app_path = path.resolve(process.cwd(), program.args[0]);
  obj = {
    goal: 'importApp',
    app_path: app_path,
    target: program.target || 'exp430'
  };
  run_plugin();
}

function run_plugin() {
  var path_for_config = path.resolve(
    __dirname,
    'config_' + new Date().getTime().toString() + '.json'
  );
  fs.writeJsonSync(path_for_config, obj);
  var rpp = path.resolve(wb_path, 'run_plugin.js');
  var cmd = ['node', rpp,
    '-b', program.branch || 'master',
    '-j', path_for_config,
    'Main', program.project
  ].join(' ');
  execSync(cmd, {
    cwd: root_path,
    stdio: 'inherit'
  });
  fs.removeSync(path_for_config);
}
