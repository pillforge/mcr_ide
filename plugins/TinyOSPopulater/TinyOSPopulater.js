/*globals define*/
/*jshint node:true, browser:true*/

/**
* Generated by PluginGenerator from webgme on Wed Apr 01 2015 14:42:10 GMT-0500 (CDT).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/TinyOSPopulater/TinyOSPopulater/meta'], function (PluginConfig, PluginBase, MetaTypes) {
  'use strict';

  /**
  * Initializes a new instance of TinyOSPopulater.
  * @class
  * @augments {PluginBase}
  * @classdesc This class represents the plugin TinyOSPopulater.
  * @constructor
  */
  var TinyOSPopulater = function () {
    // Call base class' constructor.
    PluginBase.call(this);
    this.metaTypes = MetaTypes;
  };

  // Prototypal inheritance from PluginBase.
  TinyOSPopulater.prototype = Object.create(PluginBase.prototype);
  TinyOSPopulater.prototype.constructor = TinyOSPopulater;

  /**
  * Gets the name of the TinyOSPopulater.
  * @returns {string} The name of the plugin.
  * @public
  */
  TinyOSPopulater.prototype.getName = function () {
    return 'TinyOSPopulater';
  };

  /**
  * Gets the semantic version (semver.org) of the TinyOSPopulater.
  * @returns {string} The version of the plugin.
  * @public
  */
  TinyOSPopulater.prototype.getVersion = function () {
    return '0.1.0';
  };

  /**
  * Gets the description of the TinyOSPopulater.
  * @returns {string} The description of the plugin.
  * @public
  */
  TinyOSPopulater.prototype.getDescription = function () {
    return 'Populates TinyOS';
  };

  /**
  * Gets the configuration structure for the TinyOSPopulater.
  * The ConfigurationStructure defines the configuration for the plugin
  * and will be used to populate the GUI when invoking the plugin from webGME.
  * @returns {object} The version of the plugin.
  * @public
  */
  TinyOSPopulater.prototype.getConfigStructure = function () {
    return [
      {
        'name': 'species',
        'displayName': 'Animal Species',
        'regex': '^[a-zA-Z]+$',
        'regexMessage': 'Name can only contain English characters!',
        'description': 'Which species does the animal belong to.',
        'value': 'Horse',
        'valueType': 'string',
        'readOnly': false
      },
      {
        'name': 'age',
        'displayName': 'Age',
        'description': 'How old is the animal.',
        'value': 3,
        'valueType': 'number',
        'minValue': 0,
        'maxValue': 10000,
        'readOnly': false
      },
      {
        'name': 'carnivor',
        'displayName': 'Carnivor',
        'description': 'Does the animal eat other animals?',
        'value': false,
        'valueType': 'boolean',
        'readOnly': false
      },
      {
        'name': 'classification',
        'displayName': 'Classification',
        'description': '',
        'value': 'Vertebrates',
        'valueType': 'string',
        'valueItems': [
          'Vertebrates',
          'Invertebrates',
          'Unknown'
        ]
      },
      {
        'name': 'color',
        'displayName': 'Color',
        'description': 'The hex color code for the animal.',
        'readOnly': false,
        'value': '#FF0000',
        'regex': '^#([A-Fa-f0-9]{6})$',
        'valueType': 'string'
      },
      {
        'name': 'anAsset',
        'displayName': 'Document',
        'description': '',
        'value': '',
        'valueType': 'asset',
        'readOnly': false
      }
    ];
  };


  /**
  * Main function for the plugin to execute. This will perform the execution.
  * Notes:
  * - Always log with the provided logger.[error,warning,info,debug].
  * - Do NOT put any user interaction logic UI, etc. inside this method.
  * - callback always has to be called even if error happened.
  *
  * @param {function(string, plugin.PluginResult)} callback - the result callback
  */
  TinyOSPopulater.prototype.main = function (callback) {
    // Use self to access core, project, result, logger etc from PluginBase.
    // These are all instantiated at this point.
    var self = this;
    self.updateMETA(self.metaTypes);
    // Using the logger.
    self.logger.debug('This is a debug message.');
    self.logger.info('This is an info message.');
    self.logger.warn('This is a warning message.');
    self.logger.error('This is an error message.');

    // Obtain the current user configuration.
    var currentConfig = self.getCurrentConfig();
    self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));

    // This will save the changes. If you don't want to save;
    // exclude self.save and call callback directly from this scope.
    self.result.setSuccess(true);
    self.save('added obj', function (err) {
      callback(null, self.result);
    });

  };

  return TinyOSPopulater;
});
