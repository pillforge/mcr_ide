/**
* Generated by PluginGenerator from webgme on Wed Feb 25 2015 16:17:52 GMT-0600 (CST).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/RobotCompiler/RobotCompiler/meta', './RobotCompilerWorker'], function (PluginConfig, PluginBase, MetaTypes, RobotCompilerWorker) {
  'use strict';

  /**
  * Initializes a new instance of RobotCompiler.
  * @class
  * @augments {PluginBase}
  * @classdesc This class represents the plugin RobotCompiler.
  * @constructor
  */
  var RobotCompiler = function () {
    // Call base class' constructor.
    PluginBase.call(this);
    this.metaTypes = MetaTypes;
  };

  // Prototypal inheritance from PluginBase.
  RobotCompiler.prototype = Object.create(PluginBase.prototype);
  RobotCompiler.prototype.constructor = RobotCompiler;

  /**
  * Gets the name of the RobotCompiler.
  * @returns {string} The name of the plugin.
  * @public
  */
  RobotCompiler.prototype.getName = function () {
    return "RobotCompiler";
  };

  /**
  * Gets the semantic version (semver.org) of the RobotCompiler.
  * @returns {string} The version of the plugin.
  * @public
  */
  RobotCompiler.prototype.getVersion = function () {
    return "0.1.0";
  };

  /**
  * Gets the description of the RobotCompiler.
  * @returns {string} The description of the plugin.
  * @public
  */
  RobotCompiler.prototype.getDescription = function () {
    return "Compiles the robot implementation";
  };

  /**
  * Main function for the plugin to execute. This will perform the execution.
  * Notes:
  * - Always log with the provided logger.[error,warning,info,debug].
  * - Do NOT put any user interaction logic UI, etc. inside this method.
  * - callback always has to be called even if error happened.
  *
  * @param {function(string, plugin.PluginResult)} callback - the result callback
  */
  RobotCompiler.prototype.main = function (callback) {
    // Use self to access core, project, result, logger etc from PluginBase.
    // These are all instantiated at this point.
    var self = this;
    self.updateMETA(self.metaTypes);

    // console.log(self);

    var rcw = new RobotCompilerWorker(self.core, self.META, self.rootNode);
    var robot_id = '/187823436/1419722536'; // set this when this plugin is called
    rcw.compileRobot(robot_id, function () {
      self.result.setSuccess(true);
      callback(null, self.result);
    });

  };

  return RobotCompiler;
});
